{"ast":null,"code":"var _jsxFileName = \"D:\\\\test\\\\react-tailwind-app\\\\src\\\\pages\\\\Weather.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WEATHER_API_KEY = '418fc9c9afe10063f84ae33a70965f05'; // Replace with your OpenWeatherMap API key\n\nexport const fetchWeather = async city => {\n  try {\n    const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n      params: {\n        q: city,\n        appid: WEATHER_API_KEY,\n        units: 'metric'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    return null;\n  }\n};\nconst getWeatherEmoji = description => {\n  if (description.includes('clear')) return '☀️';\n  if (description.includes('cloud')) return '☁️';\n  if (description.includes('rain')) return '🌧️';\n  if (description.includes('snow')) return '❄️';\n  if (description.includes('thunderstorm')) return '⛈️';\n  if (description.includes('mist') || description.includes('fog')) return '🌫️';\n  return '🌍'; // Default emoji\n};\nconst Weather = () => {\n  _s();\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  const handleSearch = async () => {\n    if (!city.trim()) {\n      setError('Please enter a city name.');\n      return;\n    }\n    setError(null); // Clear any previous errors\n    const result = await fetchWeather(city);\n    if (result) {\n      setWeather(result);\n    } else {\n      setError('City not found or an error occurred.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center h-full bg-gray-100 text-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-blue-600 mb-4\",\n      children: \"Weather Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: city,\n      onChange: e => setCity(e.target.value),\n      placeholder: \"Enter city name...\",\n      className: \"border border-gray-300 rounded p-2 mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 mt-2\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-4 bg-white rounded shadow w-full max-w-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-gray-800\",\n        children: [weather.name, \" \", getWeatherEmoji(weather.weather[0].description)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-700\",\n        children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-700\",\n        children: [\"Weather: \", weather.weather[0].description, \" \", getWeatherEmoji(weather.weather[0].description)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-700\",\n        children: [\"Humidity: \", weather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-700\",\n        children: [\"Wind Speed: \", weather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"lOgw79/1w+XLH67eY5z/HdeAAM0=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","WEATHER_API_KEY","fetchWeather","city","response","get","params","q","appid","units","data","error","console","getWeatherEmoji","description","includes","Weather","_s","setCity","weather","setWeather","setError","handleSearch","trim","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","name","main","temp","humidity","wind","speed","_c","$RefreshReg$"],"sources":["D:/test/react-tailwind-app/src/pages/Weather.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst WEATHER_API_KEY = '418fc9c9afe10063f84ae33a70965f05'; // Replace with your OpenWeatherMap API key\r\n\r\nexport const fetchWeather = async (city: string) => {\r\n  try {\r\n    const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\r\n      params: {\r\n        q: city,\r\n        appid: WEATHER_API_KEY,\r\n        units: 'metric',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching weather data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getWeatherEmoji = (description: string) => {\r\n  if (description.includes('clear')) return '☀️';\r\n  if (description.includes('cloud')) return '☁️';\r\n  if (description.includes('rain')) return '🌧️';\r\n  if (description.includes('snow')) return '❄️';\r\n  if (description.includes('thunderstorm')) return '⛈️';\r\n  if (description.includes('mist') || description.includes('fog')) return '🌫️';\r\n  return '🌍'; // Default emoji\r\n};\r\n\r\nconst Weather: React.FC = () => {\r\n  const [city, setCity] = useState('');\r\n  const [weather, setWeather] = useState<any | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleSearch = async () => {\r\n    if (!city.trim()) {\r\n      setError('Please enter a city name.');\r\n      return;\r\n    }\r\n    setError(null); // Clear any previous errors\r\n    const result = await fetchWeather(city);\r\n    if (result) {\r\n      setWeather(result);\r\n    } else {\r\n      setError('City not found or an error occurred.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center h-full bg-gray-100 text-center p-4\">\r\n      <h1 className=\"text-3xl font-bold text-blue-600 mb-4\">Weather Search</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={city}\r\n        onChange={(e) => setCity(e.target.value)}\r\n        placeholder=\"Enter city name...\"\r\n        className=\"border border-gray-300 rounded p-2 mb-4\"\r\n      />\r\n      <button\r\n        onClick={handleSearch}\r\n        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n      >\r\n        Search\r\n      </button>\r\n      {error && <p className=\"text-red-500 mt-2\">{error}</p>}\r\n      {weather && (\r\n        <div className=\"mt-4 p-4 bg-white rounded shadow w-full max-w-md\">\r\n          <h2 className=\"text-2xl font-bold text-gray-800\">\r\n            {weather.name} {getWeatherEmoji(weather.weather[0].description)}\r\n          </h2>\r\n          <p className=\"text-lg text-gray-700\">Temperature: {weather.main.temp}°C</p>\r\n          <p className=\"text-lg text-gray-700\">\r\n            Weather: {weather.weather[0].description} {getWeatherEmoji(weather.weather[0].description)}\r\n          </p>\r\n          <p className=\"text-lg text-gray-700\">Humidity: {weather.main.humidity}%</p>\r\n          <p className=\"text-lg text-gray-700\">Wind Speed: {weather.wind.speed} m/s</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}